AWSTemplateFormatVersion: "2010-09-09"

Description: Private Virtual cloud - Assignment 3

Parameters:
  VpcCIDR:
    Default: "10.0.0.0/16"
    Type: String
  Subnet1CIDR:
    Default: "10.0.1.0/24"
    Type: String
  Subnet2CIDR:
    Default: "10.0.2.0/24"
    Type: String
  Subnet3CIDR:
    Default: "10.0.3.0/24"
    Type: String
  Subnet4CIDR:
    Default: "10.0.4.0/24"
    Type: String
  Subnet5CIDR:
    Default: "10.0.5.0/24"
    Type: String
  Subnet6CIDR:
    Default: "10.0.6.0/24"
    Type: String
  AMIImage:
      Type: String
      Default: ami-06a2fc420b745a78e
      Description: Enter ami id
  Versioning:
    Description: Whether versioning is required for the s3 bucket
    Default: Enabled
    Type: String
    AllowedValues: [Enabled, Suspended]
  DatabaseInstanceIdentifier:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: Instance identifier name
    MaxLength: 60
    MinLength: 1
    Type: String

  DatabaseName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: MySQL database name
    MaxLength: 64
    MinLength: 1
    Type: String

  DatabaseUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: Username for MySQL database access
    MaxLength: 16
    MinLength: 1
    NoEcho: true
    Type: String

  DatabasePassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters
    Default: Pass1234
    Description: Password for MySQL database access
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String

  DatabaseBackupRetentionPeriod:
    ConstraintDescription: Database backup retention period must be between 0 and 35 days
    Default: 0
    Description: The number of days for which automatic DB snapshots are retained
    MaxValue: 35
    MinValue: 0
    Type: Number

  DatabaseAllocatedStorage:
    ConstraintDescription: Must be between 5 and 1024Gb
    Default: 20
    Description: The size of the database (Gb)
    MaxValue: 65536
    MinValue: 5
    Type: Number

  DatabaseInstanceClass:
    AllowedValues:
      - db.t1.micro
      - db.t2.micro
      - db.t3.micro
      - db.m1.small
      - db.m1.medium
      - db.m1.large
    ConstraintDescription: Must select a valid database instance type
    Default: db.t3.micro
    Description: The database instance type
    Type: String

  MultiAZDatabase:
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be either true or false
    Default: false
    Description: Creates a Multi-AZ MySQL Amazon RDS database instance
    Type: String

  DomainName:
    Default: "demo.ashish-pandey.me."
    Type: String

  CDBucketName:
    Default: "demo-ashish-csye6225"
    Type: String

  SNSTopic:
    Default: "create_token"
    Type: String

  SNSTopicArn:
    Default: "arn:aws:sns:us-east-1:AccountId:create_token"
    Type: String

  AwsAccountID:
    Default: "AccountNo"
    Type: String

  DynamoTableName:
    Default: "csye6225"
    Type: String
  
  AwsRegion:
    Default: "us-east-1"
    Type: String

  SenderEmail:
    Default: "do-not-reply@demo.ashish-pandey.me"
    Type: String

  SQSQueueName:
    Default: "send-token-queue"
    Type: String
  
  TokenSentDynamoTableName:
    Default: "token_sent_email"
    Type: String

  SSLCertificateArn:
    Default: "arn:aws:acm:us-east-1:AccountId:certificate/d64ece93-7b04-4612-901e-98f9202ad016"
    Type: String

Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
  
  subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref Subnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ""]

  sub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref Subnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]

  sub3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref Subnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs ""]
      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref Subnet4CIDR
      AvailabilityZone: !Select [3, !GetAZs ""]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref Subnet5CIDR
      AvailabilityZone: !Select [4, !GetAZs ""]

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref Subnet6CIDR
      AvailabilityZone: !Select [5, !GetAZs ""]

  RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "MySQL subnet group"
            DBSubnetGroupName: "PrivateSubnetGroup"
            SubnetIds: 
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
              - !Ref PrivateSubnet3
            Tags: 
              - Key: Name
                Value: eu-central-1-test-db-cluster

  IG:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW for VPC

  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IG
      VpcId: !Ref vpc

  PRT:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Route Table
      VpcId: !Ref vpc
      
  PR:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IG
      RouteTableId: !Ref PRT
      
  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Private Route Table
      VpcId: !Ref vpc

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IG
      RouteTableId: !Ref PrivateRT

  Addpublicsubnet1toRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PRT
      SubnetId: !Ref subnet1

  Addpublicsubnet2toRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PRT
      SubnetId: !Ref sub2

  Addpublicsubnet3toRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PRT
      SubnetId: !Ref sub3
      
  Addprivatesubnet1toRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet1
      
  Addprivatesubnet2toRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet2
      
  Addprivatesubnet3toRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet3
  
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: ::/0    

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0  

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0

        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: ::/0                   
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SSH Security Group
      VpcId: !Ref vpc

  #EC2 Security Group
  applicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security group with ports
      GroupName: applicationSecurityGroup
      SecurityGroupIngress: [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8080",
            "ToPort" : "8080",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      Tags:
        - Key: Name
          Value: EC2 Security Group
      VpcId: !Ref vpc

  webappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from load balancer on port 8080
      GroupName: webappSecurityGroup
      SecurityGroupIngress: [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            # "CidrIp" : "0.0.0.0/0"
            "SourceSecurityGroupId": {
              "Ref": "loadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            #"CidrIp" : "0.0.0.0/0"
            "SourceSecurityGroupId": {
              "Ref": "loadBalancerSecurityGroup"
            }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "8080",
            "ToPort" : "8080",
            #"CidrIp" : "0.0.0.0/0"
            "SourceSecurityGroupId": {
              "Ref": "loadBalancerSecurityGroup"
            }
          }
        ]
      Tags:
        - Key: Name
          Value: EC2 Security Group
      VpcId: !Ref vpc

  databaseSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Database instances security group"
            #DBSubnetGroupName: !Ref RDSDBSubnetGroup
            VpcId: !Ref vpc
            SecurityGroupIngress: 
              - 
                FromPort: 3306
                IpProtocol: "tcp"
                ToPort: 3306
                SourceSecurityGroupId: !Ref webappSecurityGroup
            Tags:
              - Key: Name
                Value: Database Security Group

  RDSDBInstance:
        Type: AWS::RDS::DBInstance
        Properties:
          KmsKeyId: !Ref RdsKeyId
          StorageEncrypted: true
          AllocatedStorage: !Ref DatabaseAllocatedStorage
          #AvailabilityZone: !Select [ 1, !GetAZs  '' ]
          BackupRetentionPeriod: !Ref DatabaseBackupRetentionPeriod
          DBInstanceClass: !Ref DatabaseInstanceClass
          DBInstanceIdentifier: !Ref DatabaseInstanceIdentifier
          DBName: !Ref DatabaseName
          DBSubnetGroupName: !Ref RDSDBSubnetGroup
          Engine: MySQL
          EngineVersion: 5.7.31
          MasterUsername: !Ref DatabaseUser
          MasterUserPassword: !Ref DatabasePassword
          MultiAZ: !Ref MultiAZDatabase
          DBParameterGroupName: !Ref dBParameterGroup
          VPCSecurityGroups: 
            - Ref: databaseSecurityGroup
          Tags: 
            - Key: Name
              Value: aws-dxl-database-1
            - Key: createdBy
              Value: Ashish Pandey

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bucket.demo.ashishpandey.me
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for lifecycle of S3 bucket
            Prefix: logs
            Status: Enabled
            ExpirationInDays: 31
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA

  # S3BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal: "*"
  #           Action:
  #             - s3:Delete*
  #             - s3:Get*
  #             - s3:Put*
  #             - s3:List*
  #           Resource:
  #             - arn:aws:s3:::bucket.dev.ashishpandey.me
  #             - arn:aws:s3:::bucket.dev.ashishpandey.me/*
  #     Bucket: !Ref S3Bucket

  # EC2Instance:
  #     Type: AWS::EC2::Instance
  #     Properties:
  #       ImageId: !Ref AMIImage
  #       InstanceType: t2.micro
  #       KeyName: csye6225
  #       IamInstanceProfile: !Ref MyInstanceProfile
  #       UserData:
  #         Fn::Base64: 
  #           !Sub |
  #             #!/bin/bash
  #             cd /home/ec2-user
  #             touch application.properties
  #             echo spring.jpa.hibernate.ddl-auto=update >> application.properties
  #             echo spring.datasource.url=jdbc:mysql:\/\/${RDSDBInstance.Endpoint.Address}:3306\/csye6225 >> application.properties
  #             echo spring.datasource.username=${DatabaseUser} >> application.properties
  #             echo spring.datasource.password=${DatabasePassword} >> application.properties
  #             echo spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect >> application.properties
  #             echo test.env.variable=working >> application.properties
  #             echo bucketName=${S3Bucket} >> application.properties
  #             chmod 764 application.properties
  #             sudo systemctl daemon-reload
  #             sudo systemctl enable webservice.service
  #             sudo systemctl start webservice.service
  #             sudo systemctl status webservice.service
  #       NetworkInterfaces:
  #       - AssociatePublicIpAddress: "true"
  #         DeviceIndex: "0"
  #         GroupSet:
  #           - Ref: webappSecurityGroup
  #         SubnetId: !Ref subnet1
  #       BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           VolumeType: "gp2"
  #           DeleteOnTermination: "true"
  #           VolumeSize: "60"
  #       Tags:
  #       - Key: Name
  #         Value: !Sub "${AWS::StackName}-EC2"

  # MyInstanceProfile: 
  #   Type: "AWS::IAM::InstanceProfile"
  #   Properties: 
  #     Path: "/"
  #     Roles: 
  #       - 
  #         Ref: "EC2IamRole"

  # EC2IamRole: 
  #   Type: "AWS::IAM::Role"
  #   Properties: 
  #     RoleName: EC2-CSYE6225
  #     AssumeRolePolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - 
  #           Effect: "Allow"
  #           Principal: 
  #             Service: 
  #               - "ec2.amazonaws.com"
  #           Action: 
  #             - "sts:AssumeRole"
  #     Path: "/" 

  # WebAppS3: 
  #   Type: "AWS::IAM::Policy"
  #   Properties: 
  #     PolicyName: "WebAppS3"
  #     PolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - Effect: "Allow"
  #           Action:
  #             - s3:PutObject
  #             - s3:PutObjectAcl
  #             - s3:GetObject
  #             - s3:GetObjectVersion
  #             - s3:ListBucket
  #           Resource:
  #             - "arn:aws:s3:::testwebappashish12.dev.domain.tld"
  #             - "arn:aws:s3:::testwebappashish12.dev.domain.tld/*"
  #     Roles: 
  #       - Ref: "EC2IamRole"

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: load balancer Security group with ports
      GroupName: loadBalancerSecurityGroup
      SecurityGroupIngress: [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      Tags:
        - Key: Name
          Value: EC2 Security Group
      VpcId: !Ref vpc

  launchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-EC2-instance'
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda" 
            Ebs:
              VolumeSize: 60
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
              KmsKeyId: !Ref EbsKey
        KeyName: csye6225
        InstanceType: t2.micro
        IamInstanceProfile:
          Arn: !GetAtt
            - EC2InstanceProfile
            - Arn
        #IamInstanceProfile: !Ref EC2InstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups: 
              - !Ref webappSecurityGroup
            DeleteOnTermination: true
        Placement:
          Tenancy: default
        ImageId: !Ref AMIImage
        UserData:
            Fn::Base64: 
              !Sub |
                #!/bin/bash
                cd /home/ec2-user
                touch application.properties
                echo spring.jpa.hibernate.ddl-auto=update >> application.properties
                echo "spring.datasource.url=jdbc:mysql:\/\/${RDSDBInstance.Endpoint.Address}:3306\/csye6225?sslMode=REQUIRED" >> application.properties
                echo spring.datasource.username=${DatabaseUser} >> application.properties
                echo spring.datasource.password=${DatabasePassword} >> application.properties
                echo spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect >> application.properties
                echo test.env.variable=working >> application.properties
                echo bucketName=${S3Bucket} >> application.properties
                echo logging.level.org.springframework=INFO >> application.properties
                echo logging.level.root=INFO >> application.properties
                echo logging.pattern.console=%-5level %logger{36} - %msg%n >> application.properties
                echo logging.file.name=/home/ec2-user/log_file.txt >> application.properties
                echo logging.level.application=info >> application.properties
                echo snstopic=${SNSTopic} >> application.properties
                echo snstopicArn=${SNSTopicArn} >> application.properties
                chmod 764 application.properties
                sudo yum update -y
                sudo yum install ruby -y
                sudo yum install wget -y
                wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
                chmod +x ./install
                sudo ./install auto
                sudo yum install amazon-cloudwatch-agent -y
                sudo systemctl daemon-reload
                sudo systemctl enable webservice.service
                sudo systemctl start webservice.service
                sudo systemctl status webservice.service

  # launchConfig:
  #   Type: AWS::EC2::LaunchTemplate
  #   AssociatePublicIpAddress: true
  #   Properties:
  #     LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
  #     LaunchTemplateData:
  #       BlockDeviceMappings:
  #         - DeviceName: /dev/sda1
  #           Ebs:
  #             VolumeSize: 20
  #             VolumeType: "gp3"
  #             DeleteOnTermination: true
  #       ImageId: !Ref AMIImage
  #       InstanceType: t3.micro
  #       KeyName: csye6225
  #       IamInstanceProfile:
  #         Arn: !GetAtt MyInstanceProfile.Arn
  #       SecurityGroupIds:
  #         - !Ref webappSecurityGroup
  #       UserData:
  #         Fn::Base64: 
  #           !Sub |
  #             #!/bin/bash
  #             cd /home/ec2-user
  #             touch application.properties
  #             echo spring.jpa.hibernate.ddl-auto=update >> application.properties
  #             echo spring.datasource.url=jdbc:mysql:\/\/${RDSDBInstance.Endpoint.Address}:3306\/csye6225 >> application.properties
  #             echo spring.datasource.username=${DatabaseUser} >> application.properties
  #             echo spring.datasource.password=${DatabasePassword} >> application.properties
  #             echo spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect >> application.properties
  #             echo test.env.variable=working >> application.properties
  #             echo bucketName=${S3Bucket} >> application.properties
  #             chmod 764 application.properties
  #             sudo systemctl daemon-reload
  #             sudo systemctl enable webservice.service
  #             sudo systemctl start webservice.service
  #             sudo systemctl status webservice.service

  autoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones:
          - us-east-1a
          - us-east-1b
          - us-east-1c
      Cooldown: '60'
      HealthCheckGracePeriod: '90'
      HealthCheckType: EC2
      DesiredCapacity: '3'
      #LaunchConfigurationName: !Ref launchConfig
      LaunchTemplate:
        LaunchTemplateId: !Ref launchTemplate
        Version: 1
      # LaunchTemplate:
      #   LaunchTemplateId: !Ref launchConfig
      #   Version: !GetAtt launchConfig.LatestVersionNumber
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      Tags:
        - Key: Name
          Value: !Sub 
            - '${AWS::StackName}-csye6225-ec2'
            - StackName: '${AWS::StackName}'
          PropagateAtLaunch: true
        - Key: ec2-deploy
          Value: deploy-ec2
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref subnet1
        - !Ref sub2
        - !Ref sub3
  
  autoScalingCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref autoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 90.0

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - !Ref subnet1
        - !Ref sub2
        - !Ref sub3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref vpc

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 443
      Protocol: HTTPS

  ResourceRecords:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Ref DomainName
      Name: !Ref DomainName
      AliasTarget:
        HostedZoneId: !GetAtt 
          - loadBalancer
          - CanonicalHostedZoneID
        EvaluateTargetHealth: 'TRUE'
        DNSName: !GetAtt 
          - loadBalancer
          - DNSName
      Type: A

  ApplicationScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  ApplicationScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref autoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'

  CPUHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU more than 5% 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '120'
      EvaluationPeriods: '2'
      Threshold: '5'
      AlarmActions:
        - !Ref ApplicationScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU less than 3% 
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '3'
      AlarmActions:
        - !Ref ApplicationScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref autoScalingGroup
      ComparisonOperator: LessThanThreshold

  CodeDeployEC2S3UserPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Allows Ec2 instance to access data
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - arn:aws:s3:::${CDBucketName}
              - arn:aws:s3:::${CDBucketName}/*
              - arn:aws:s3:::bucket.demo.ashishpandey.me
              - arn:aws:s3:::bucket.demo.ashishpandey.me/*
      ManagedPolicyName: CodeDeploy-EC2-S3

  CodeDeployEC2ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - "dynamodb.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: CodeDeployEC2ServiceRole
      ManagedPolicyArns:
        - !Ref CodeDeployEC2S3UserPolicy
        - !Ref CodeDeployEC2DynamoDbUserPolicy
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'

  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'
      Path: /

  CodeDeployApplication:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: csye6225-webapp
      ComputePlatform: Server

  DeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      AutoScalingGroups:
        - !Ref autoScalingGroup
      DeploymentGroupName: csye6225-webapp-deployment
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      Ec2TagFilters:
        - Key: code-deploy
          Value: code-deploy-ec2
          Type: KEY_AND_VALUE
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: !GetAtt 
              - loadBalancerTargetGroup
              - TargetGroupName
      ServiceRoleArn: !GetAtt 
        - CodeDeployServiceRole
        - Arn

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref CodeDeployEC2ServiceRole

  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: !Sub ${DynamoTableName}
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: 'TRUE'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-csye6225-dynamodb
    DependsOn:
      - CodeDeployEC2DynamoDbUserPolicy

  TokenSentDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TableName: !Sub ${TokenSentDynamoTableName}
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: 'TRUE'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-tokensentcsye6225-dynamodb
    DependsOn:
      - CodeDeployEC2DynamoDbUserPolicy

  EC2SNSPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: Publish-EC2-SNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sns:Publish'
              - 'sns:ListTopics'
            Resource:
              - !Ref SNSTopicArn
              - '*'
      Roles:
        - !Ref CodeDeployEC2ServiceRole


  CodeDeployEC2DynamoDbUserPolicy:
      Type: 'AWS::IAM::ManagedPolicy'
      Properties:
        Description: Allows Ec2 instance to dynamo db
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                #- 'dynamodb:*'
                - 'dynamodb:GetItem'
                - 'dynamodb:Query'
                - 'dynamodb:Scan'
                - 'dynamodb:BatchWriteItem'
                - 'dynamodb:PutItem'
                - 'dynamodb:UpdateItem'
              Resource:
                - !Sub arn:aws:dynamodb:${AwsRegion}:${AwsAccountID}:table/${DynamoTableName}
                - !Sub arn:aws:dynamodb:${AwsRegion}:${AwsAccountID}:table/${TokenSentDynamoTableName}
        ManagedPolicyName: CodeDeploy-EC2-DynamoDb

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      RoleName: LambdaRole

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CDBucketName
        S3Key: lambda-0.0.1-SNAPSHOT.jar
      Environment:
        Variables:
          SenderEmail: !Ref SenderEmail
      FunctionName: SendRegistrationEmail
      Handler: 'com.csye6225.lambda.EmailEvent::handleRequest'
      MemorySize: 256
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: java11
      Timeout: 120

  SNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Ref SNSTopic
      Subscription:
        - Endpoint: !GetAtt 
            - LambdaFunction
            - Arn
          Protocol: lambda

  SNSLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:*'
      FunctionName: !GetAtt 
        - LambdaFunction
        - Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref SNS

  SQSQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 864000
      VisibilityTimeout: 30
      QueueName: !Ref SQSQueueName
      Tags:
        - Key: Name
          Value: !Ref SQSQueueName

  LambdaUpdate:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:UpdateFunctionCode'
            Resource:
              - !Join 
                - ':'
                - - 'arn:aws:lambda'
                  - !Ref 'AWS::Region'
                  - !Ref 'AWS::AccountId'
                  - 'function:SendRegistrationEmail'
      PolicyName: Github-Lambda-Updates
      Users:
        - ghactions-app

  RdsKeyId:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Rds key
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: 2012-10-17
        Id: sym-ebs-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::AccountId:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::AccountId:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::AccountId:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  EbsKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Ebs key
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: 2012-10-17
        Id: sym-ebs-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::AccountId:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: 
                - !GetAtt CodeDeployEC2ServiceRole.Arn
                - !GetAtt CodeDeployServiceRole.Arn
                - 'arn:aws:iam::AccountId:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: 
                - !GetAtt CodeDeployEC2ServiceRole.Arn
                - !GetAtt CodeDeployServiceRole.Arn
                - 'arn:aws:iam::AccountId:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  dBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: SQL custom param group
      Family: mysql5.7
      Parameters:
        performance_schema: 1

#Dynamo DB backup
# {
#     "Version": "2012-10-17",
#     "Statement": [
#         {
#             "Sid": "VisualEditor0",
#             "Effect": "Allow",
#             "Action": [
#                 "dynamodb:ListContributorInsights",
#                 "dynamodb:DescribeReservedCapacityOfferings",
#                 "dynamodb:ListGlobalTables",
#                 "dynamodb:ListTables",
#                 "dynamodb:DescribeReservedCapacity",
#                 "dynamodb:ListBackups",
#                 "dynamodb:PurchaseReservedCapacityOfferings",
#                 "dynamodb:DescribeLimits",
#                 "dynamodb:ListExports",
#                 "dynamodb:ListStreams"
#             ],
#             "Resource": "*"
#         },
#         {
#             "Sid": "VisualEditor1",
#             "Effect": "Allow",
#             "Action": "dynamodb:*",
#             "Resource": "arn:aws:dynamodb:us-east-1:AccountId:table/csye6225"
#         }
#     ]
# }


